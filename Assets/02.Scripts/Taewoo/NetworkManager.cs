using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Photon.Pun;
using Photon.Realtime;
using UnityEngine.UI;

public class NetworkManager : MonoBehaviourPunCallbacks
{
    public Text StatusText;
    public InputField roomInput, NickNameInput;
    /* 자기 페인트브러쉬아니면 끄는코드에 필요한것
    public GameObject brush;
    public PhotonView PV;
    */
    public bool isSpon = false;
    int nick = 0;

    void Awake()
    {
        Screen.SetResolution(960, 540, false);

    }



    public void ModeChange()//온클릭함수로 방장이 누를경우 모드값이변경됨
    {
        if (PhotonNetwork.IsMasterClient == true)

        {
            if (modeSyn.mode==0)
            {
                modeSyn.mode = 1;
            }
            if (modeSyn.mode == 1)
            {
                modeSyn.mode = 2;
            }
            else if (modeSyn.mode == 2)
            {
                modeSyn.mode = 1;
            }
        }
    }

    void Update()
    {//모드 상태
        //Connect();
        //모드체인지함수에 mode변수를 바꾸는것넣고 여기다 그것에 따라 모드를 바꾸는이유는 모드변수를 동기화해서 전체플레이어에 적용하기위함임


        /*
        if (modeSyn.mode == 1)
        {
            StatusText.text = "자유 문장모드";
        }
        else if (modeSyn.mode == 2)
        { 
            StatusText.text= "커스텀모드";
        }
        else
        {
            StatusText.text = "모드를 선택중";
            Debug.Log(modeSyn.mode);
        }
        */
        //StatusText.text = PhotonNetwork.NetworkClientState.ToString();
    }

    public Vector3 ConvertAngleToVector(float _deg, float r)
    {
        var rad = _deg * Mathf.Deg2Rad;
        return new Vector3(r * Mathf.Cos(rad), 0.0f, r * Mathf.Sin(rad));
    }

    public Vector3 ConvertAngleToVectorS(float _deg, float r) //스케치북
    {
        var rad = _deg * Mathf.Deg2Rad;
        return new Vector3(r * Mathf.Cos(rad), 0.5286f, r * Mathf.Sin(rad));
    }
    public Vector3 ConvertAngleToVectorR(float _deg, float r)//로봇=플레이어
    {
        var rad = _deg * Mathf.Deg2Rad;
        return new Vector3(r * Mathf.Cos(rad), 0.612f, r * Mathf.Sin(rad));
    }
    public Vector3 ConvertAngleToVectorN(float _deg, float r)//이름
    {
        var rad = _deg * Mathf.Deg2Rad;
        return new Vector3(r * Mathf.Cos(rad), 0.7f, r * Mathf.Sin(rad));
    }

    public void Connect() => PhotonNetwork.ConnectUsingSettings();

    public override void OnConnectedToMaster()
    {

        print("서버접속완료");
        PhotonNetwork.LocalPlayer.NickName = NickNameInput.text;
        JoinLobby();




    }



    public void Disconnect() => PhotonNetwork.Disconnect();

    public override void OnDisconnected(DisconnectCause cause) => print("연결끊김");



    public void JoinLobby() => PhotonNetwork.JoinLobby();

    public override void OnJoinedLobby()
    {
        print("로비접속완료");
        //CreateRoom();//개발위해 자동방만들기
    }



    public void CreateRoom() => PhotonNetwork.CreateRoom(roomInput.text, new RoomOptions { MaxPlayers = 4 });

    public void JoinRoom() => PhotonNetwork.JoinRoom(roomInput.text);

    public void JoinOrCreateRoom() => PhotonNetwork.JoinOrCreateRoom(roomInput.text, new RoomOptions { MaxPlayers = 4 }, null);

    public void JoinRandomRoom() => PhotonNetwork.JoinRandomRoom();

    public void LeaveRoom() => PhotonNetwork.LeaveRoom();

    public override void OnCreatedRoom()
    {
        print("방만들기완료");
        isSpon = true;
        Info();
    }

    public override void OnJoinedRoom()
    {
        isSpon = true;
        print("방참가완료");
       

    }

    public override void OnCreateRoomFailed(short returnCode, string message) => print("방만들기실패");

    public override void OnJoinRoomFailed(short returnCode, string message) => print("방참가실패");

    public override void OnJoinRandomFailed(short returnCode, string message) => print("방랜덤참가실패");



    [ContextMenu("정보")]
    void Info()
    {
        if (PhotonNetwork.InRoom)
        {
            print("현재 방 이름 : " + PhotonNetwork.CurrentRoom.Name);
            print("현재 방 인원수 : " + PhotonNetwork.CurrentRoom.PlayerCount);
            print("현재 방 최대인원수 : " + PhotonNetwork.CurrentRoom.MaxPlayers);

            string playerStr = "방에 있는 플레이어 목록 : ";
            for (int i = 0; i < PhotonNetwork.PlayerList.Length; i++) playerStr += PhotonNetwork.PlayerList[i].NickName + ", ";
            print(playerStr);
        }
        else
        {
            print("접속한 인원 수 : " + PhotonNetwork.CountOfPlayers);
            print("방 개수 : " + PhotonNetwork.CountOfRooms);
            print("모든 방에 있는 인원 수 : " + PhotonNetwork.CountOfPlayersInRooms);
            print("로비에 있는지? : " + PhotonNetwork.InLobby);
            print("연결됐는지? : " + PhotonNetwork.IsConnected);
        }
    }
}